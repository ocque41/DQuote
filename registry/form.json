{
  "$schema": "https://ui.shadcn.com/schema.json",
  "name": "form",
  "type": "registry:ui",
  "files": [
    {
      "name": "form.tsx",
      "path": "components/ui/form.tsx",
      "type": "registry:ui",
      "content": "import * as React from 'react';\nimport * as LabelPrimitive from '@radix-ui/react-label';\nimport { Slot } from '@radix-ui/react-slot';\nimport { Controller, type ControllerProps, type FieldPath, type FieldValues, FormProvider, useFormContext } from 'react-hook-form';\n\nimport { cn } from '@/lib/utils';\n\nconst Form = FormProvider;\n\nconst FormField = <TFieldValues extends FieldValues, TName extends FieldPath<TFieldValues>>(\n  { ...props }: ControllerProps<TFieldValues, TName>\n) => {\n  return <Controller {...props} />;\n};\n\nconst FormItemContext = React.createContext<{ id: string } | undefined>(undefined);\n\nconst FormItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const id = React.useId();\n\n    return (\n      <FormItemContext.Provider value={{ id }}>\n        <div ref={ref} className={cn('space-y-2', className)} {...props} />\n      </FormItemContext.Provider>\n    );\n  }\n);\nFormItem.displayName = 'FormItem';\n\nconst useFormItem = () => {\n  const context = React.useContext(FormItemContext);\n\n  if (!context) {\n    throw new Error('useFormItem must be used within a <FormItem>');\n  }\n\n  return context;\n};\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { id } = useFormItem();\n  return <LabelPrimitive.Root ref={ref} className={cn('text-sm font-medium', className)} htmlFor={id} {...props} />;\n});\nFormLabel.displayName = 'FormLabel';\n\nconst FormControl = React.forwardRef<React.ElementRef<typeof Slot>, React.ComponentPropsWithoutRef<typeof Slot>>(\n  ({ ...props }, ref) => {\n    const { id } = useFormItem();\n    return <Slot ref={ref} id={id} {...props} />;\n  }\n);\nFormControl.displayName = 'FormControl';\n\nconst FormDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, ...props }, ref) => (\n    <p ref={ref} className={cn('text-sm text-muted-foreground', className)} {...props} />\n  )\n);\nFormDescription.displayName = 'FormDescription';\n\nconst FormMessage = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <p ref={ref} className={cn('text-sm font-medium text-destructive', className)} {...props}>\n        {children}\n      </p>\n    );\n  }\n);\nFormMessage.displayName = 'FormMessage';\n\nconst useFormField = () => {\n  const fieldContext = useFormContext();\n  const itemContext = React.useContext(FormItemContext);\n\n  if (!itemContext) {\n    throw new Error('useFormField should be used within <FormItem>');\n  }\n\n  return {\n    id: itemContext.id,\n    formState: fieldContext.formState\n  };\n};\n\nexport { Form, FormField, FormItem, FormLabel, FormControl, FormDescription, FormMessage, useFormField };\n"
    }
  ]
}
