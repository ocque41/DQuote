generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum SlideType {
  INTRO
  CHOICE_CORE
  ADDONS
  PORTFOLIO
  REVIEW
  ACCEPT
}

enum OptionKind {
  ITEM
  BUNDLE
}

enum EventType {
  VIEW
  SELECT
  DESELECT
  ACCEPT
  PAY
  PORTFOLIO_OPEN
}

enum ProposalStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  DECLINED
  EXPIRED
}

model Org {
  id        String             @id @default(uuid())
  name      String
  slug      String             @unique
  users     User[]
  clients   Client[]
  catalog   CatalogItem[]
  templates ProposalTemplate[]
  proposals Proposal[]
  assets    Asset[]
  rules     PricingRule[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model User {
  id        String   @id @default(uuid())
  orgId     String?
  org       Org?     @relation(fields: [orgId], references: [id])
  email     String   @unique
  name      String?
  role      String? // "admin" | "editor" | "viewer"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id        String     @id @default(uuid())
  orgId     String
  org       Org        @relation(fields: [orgId], references: [id])
  name      String
  company   String?
  email     String?
  phone     String?
  notes     String?
  proposals Proposal[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CatalogItem {
  id          String   @id @default(uuid())
  orgId       String
  org         Org      @relation(fields: [orgId], references: [id])
  code        String?  @unique
  name        String
  description String?
  unit        String? // "unit", "hour", etc.
  unitPrice   Decimal  @db.Decimal(12, 2)
  currency    String   @default("EUR")
  active      Boolean  @default(true)
  tags        String[]
  assets      Asset[]
  options     Option[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProposalTemplate {
  id          String   @id @default(uuid())
  orgId       String
  org         Org      @relation(fields: [orgId], references: [id])
  title       String
  description String?
  theme       Json?
  slides      Slide[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Slide {
  id         String            @id @default(uuid())
  templateId String?
  template   ProposalTemplate? @relation(fields: [templateId], references: [id])
  proposalId String?
  proposal   Proposal?         @relation(fields: [proposalId], references: [id])
  type       SlideType
  title      String?
  subtitle   String?
  position   Int
  meta       Json?
  options    Option[]
}

model Option {
  id            String       @id @default(uuid())
  slideId       String
  slide         Slide        @relation(fields: [slideId], references: [id])
  catalogItemId String?
  catalogItem   CatalogItem? @relation(fields: [catalogItemId], references: [id])
  kind          OptionKind
  description   String?
  priceOverride Decimal?     @db.Decimal(12, 2)
  currency      String? // default to item currency if null
  isDefault     Boolean      @default(false)
  isAddOn       Boolean      @default(false)
  minQty        Int? // null => 0
  maxQty        Int?
  defaultQty    Int? // null => 1
  selections    Selection[]
}

model PricingRule {
  id        String   @id @default(uuid())
  orgId     String
  org       Org      @relation(fields: [orgId], references: [id])
  name      String
  type      String // "discount_fixed" | "discount_pct" | "tax_pct" | "require" | "mutex"
  config    Json // payload for applying rule & dependencies
  createdAt DateTime @default(now())
}

model Proposal {
  id         String         @id @default(uuid())
  orgId      String
  org        Org            @relation(fields: [orgId], references: [id])
  clientId   String
  client     Client         @relation(fields: [clientId], references: [id])
  title      String
  status     ProposalStatus @default(DRAFT)
  shareId    String         @unique
  expiresAt  DateTime?
  theme      Json?
  slides     Slide[]
  selections Selection[]
  quote      Quote?
  events     Event[]
  createdBy  String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Selection {
  id         String   @id @default(uuid())
  proposalId String
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  optionId   String
  option     Option   @relation(fields: [optionId], references: [id])
  qty        Int      @default(1)

  @@unique([proposalId, optionId])
}

model Quote {
  id          String   @id @default(uuid())
  proposalId  String   @unique
  proposal    Proposal @relation(fields: [proposalId], references: [id])
  currency    String   @default("EUR")
  subtotal    Decimal  @db.Decimal(12, 2)
  discount    Decimal  @default(0) @db.Decimal(12, 2)
  tax         Decimal  @default(0) @db.Decimal(12, 2)
  total       Decimal  @db.Decimal(12, 2)
  deposit     Decimal? @db.Decimal(12, 2)
  pdfUrl      String?
  signatureId String?
  stripeId    String?
  createdAt   DateTime @default(now())
}

model Asset {
  id            String       @id @default(uuid())
  orgId         String
  org           Org          @relation(fields: [orgId], references: [id])
  catalogItemId String?
  catalogItem   CatalogItem? @relation(fields: [catalogItemId], references: [id])
  title         String?
  type          String // "image" | "video" | "link"
  url           String
  tags          String[]
  createdAt     DateTime     @default(now())
}

model Event {
  id         String    @id @default(uuid())
  proposalId String
  proposal   Proposal  @relation(fields: [proposalId], references: [id])
  type       EventType
  data       Json?
  createdAt  DateTime  @default(now())
}
